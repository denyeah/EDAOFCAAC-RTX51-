C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\PID.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\SOFTWARE\ALGORITHM\PID\PID.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -PID.lst) TABS(2) OBJECT(.\PID.obj)

line level    source

   1          /************************************************************
   2          * ×éÖ¯Ãû³Æ£ºµç×Ó´óÈüÐ¡×é
   3          * ÎÄ¼þÃû³Æ: PID.c
   4          * ×÷Õß:     µç×Ó´óÈüÐ¡×é
   5          * °æ±¾ :    1.0
   6          * ÈÕÆÚ:     10/06/17
   7          * ÃèÊö:
   8          * ÀúÊ·ÐÞ¸Ä¼ÇÂ¼:
   9          * <×÷Õß> <Ê±¼ä> <°æ±¾ > <ÃèÊö>
  10          ***********************************************************/
  11          
  12          #include "PID.h"
  13          #define PID_ALG
  14          #ifdef PID_ALG
  15          #include <math.h>
  16          #define  INTEGRAL_SEPARATE //Ê¹ÓÃ»ý·Ö·ÖÀë·¨
  17          
  18          //pidËã·¨µÄ¾²Ì¬½á¹¹Ìå
  19          
  20          typedef  struct
  21          {
  22            float PID_setTargetParameter;//Éè¶¨½Ç¶ÈÖµ
  23            float actualParameter;//Êµ¼Ê½Ç¶ÈÖµ
  24            float err;//Æ«²îÖµ
  25            float err_last;//ÉÏÒ»´ÎÆ«²îÖµ
  26            float Kp;
  27            float Ki;
  28            float Kd;//±ÈÀý£¬»ý·Ö£¬Î¢·ÖÏµÊý
  29            float integral;//»ý·ÖÖµ,Î»ÖÃÊ½pidËã·¨
  30            float output;  //Êµ¼ÊÊä³öÒò×Ó
  31            float Ki_temp;//±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  32            float Kp_temp;//±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  33            float Kd_temp; //±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  34            float parameterUpperLimit;//²ÎÊýÉÏÏÞ
  35            float parameterInferiorLimit;//²ÎÊýÏÂÏÞ
  36            u8 state;//pid¹¤×÷×´Ì¬
  37          } pid_info;
  38          
  39          static pid_info g_pid_n_info[PID_NUM];
  40          
  41          /*************************************************
  42          * º¯ÊýÃû³Æ:PID_config
  43          * ÃèÊö: pid³õÊ¼»¯º¯Êý
  44          * ÊäÈë:u8 PID_N, float kp, float ki, float kd
  45          * Êä³ö:
  46          * ·µ»ØÖµ:
  47          * ÆäËûËµÃ÷:
  48          *************************************************/
  49          void PID_config(u8 PID_N, float kp, float ki, float kd)//pidËã·¨³õÊ¼»¯º¯Êý£¬²ÎÊýÊÇÈý¸ö£¬PID
  50          {
  51   1        g_pid_n_info[PID_N].err = 0;
  52   1        g_pid_n_info[PID_N].err_last = 0;
  53   1        g_pid_n_info[PID_N].output = 0;
  54   1        g_pid_n_info[PID_N].integral = 0;
C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 2   

  55   1        g_pid_n_info[PID_N].Kp = kp;
  56   1        g_pid_n_info[PID_N].Ki = ki;
  57   1        g_pid_n_info[PID_N].Kd = kd;
  58   1        g_pid_n_info[PID_N].Kp_temp = g_pid_n_info[PID_N].Kp;
  59   1        g_pid_n_info[PID_N].Ki_temp = g_pid_n_info[PID_N].Ki;
  60   1        g_pid_n_info[PID_N].Kd_temp = g_pid_n_info[PID_N].Kd;
  61   1      }
  62          //************************************
  63          // Method:    openPID
  64          // FullName:  openPID
  65          // Access:    public 
  66          // Returns:   void
  67          // Qualifier: ´ò¿ªpid
  68          // Parameter: u8 PID_N
  69          //************************************
  70          void openPID(u8 PID_N)
  71          {
  72   1        g_pid_n_info[PID_N].state = ON;
  73   1        //add the code here
  74   1      }
  75          //************************************
  76          // Method:    closePID
  77          // FullName:  closePID
  78          // Access:    public 
  79          // Returns:   void
  80          // Qualifier:¹Ø±Õpid
  81          // Parameter: u8 PID_N
  82          //************************************
  83          void closePID(u8 PID_N)
  84          {
  85   1        g_pid_n_info[PID_N].state = OFF;
  86   1        //add the code here
  87   1      
  88   1      }
  89          //************************************
  90          // Method:    PID
  91          // FullName:  PID
  92          // Access:    public 
  93          // Returns:   bit
  94          // Qualifier: ÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpidÔÙÊ¹ÓÃ´Ëº¯Ê
             -ý
  95          // Parameter: u8 PID_N
  96          //************************************
  97          bit PID(u8 PID_N)
  98          {
  99   1      
 100   1      
 101   1      
 102   1          g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].PID_setTargetParameter - g_pid_n_info[PID_N].actualParamet
             -er;
 103   1          #ifdef  INTEGRAL_SEPARATE //ÊÇ·ñÊ¹ÓÃ»ý·Ö·ÖÀë·¨
 104   1            if(abs(g_pid_n_info[PID_N].err)<15.0f)//»ý·Ö·ÖÀë·¨£¬·ÀÖ¹Îó²î¹ý´óÊ±»ý·ÖÀÛ»ý¹ý´óÔì³ÉÕðµ´£¬Í¬Ê±¼õÐ¡±ÈÀýºÍ
             -Î¢·Ö
 105   1              {
 106   2               g_pid_n_info[PID_N].Ki        =        g_pid_n_info[PID_N].Ki_temp;
 107   2                g_pid_n_info[PID_N].integral  +=       g_pid_n_info[PID_N].err;
 108   2                g_pid_n_info[PID_N].Kp        =        g_pid_n_info[PID_N].Kp_temp-0.7f;
 109   2               g_pid_n_info[PID_N].Kd        =        g_pid_n_info[PID_N].Kd_temp-0.5f;
 110   2              }
 111   1            else//Îó²î¹ý´óÊ±È¥³ý»ý·ÖÏîºÍÀÛ¼ÆÎó²î £¬½öÊ¹ÓÃ±ÈÀýºÍÎ¢·Ö £¬Í¬Ê±ÔÚÔ­»ù´¡ÉÏ¼Ó´óÎ¢·ÖµÄ×÷ÓÃ
 112   1              {
 113   2                g_pid_n_info[PID_N].Ki        =        0;
C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 3   

 114   2                g_pid_n_info[PID_N].integral  =        0;
 115   2               g_pid_n_info[PID_N].Kd        =        g_pid_n_info[PID_N].Kd_temp+0.5f;
 116   2              }
 117   1          #else
                  g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;
                  #endif
 120   1          //PIDËã·¨ºËÐÄ
 121   1          g_pid_n_info[PID_N].output  = g_pid_n_info[PID_N].Kp*g_pid_n_info[PID_N].err      \
 122   1                        + g_pid_n_info[PID_N].Ki*g_pid_n_info[PID_N].integral     \
 123   1                        + g_pid_n_info[PID_N].Kd*(g_pid_n_info[PID_N].err - g_pid_n_info[PID_N].err_last);
 124   1          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 125   1      
 126   1      
 127   1          return 1;
 128   1        
 129   1      }
 130          //************************************
 131          // Method:    setParameterInferiorLimit
 132          // FullName:  setParameterInferiorLimit
 133          // Access:    public 
 134          // Returns:   void
 135          // Qualifier: ÉèÖÃÊäÈëÊýÖµÏÂÏÞ
 136          // Parameter: u8 PID_N
 137          // Parameter: float value
 138          //************************************
 139          void PID_setParameterInferiorLimit(u8 PID_N, float value)
 140          {
 141   1        g_pid_n_info[PID_N].parameterInferiorLimit = value;
 142   1      }
 143          
 144          //************************************
 145          // Method:    setParameterUpperLimit
 146          // FullName:  setParameterUpperLimit
 147          // Access:    public 
 148          // Returns:   void
 149          // Qualifier: ÉèÖÃÊäÈëÊýÖµÉÏÏÞ
 150          // Parameter: u8 PID_N
 151          // Parameter: float value
 152          //************************************
 153          void PID_setParameterUpperLimit(u8 PID_N, float value)
 154          {
 155   1        g_pid_n_info[PID_N].parameterUpperLimit = value;
 156   1      
 157   1      }
 158          
 159          //************************************
 160          // Method:    setActualParameter
 161          // FullName:  setActualParameter
 162          // Access:    public 
 163          // Returns:   void
 164          // Qualifier: ÉèÖÃÊµ¼ÊÊäÈëÊýÖµ
 165          // Parameter: u8 PID_N
 166          // Parameter: float value
 167          //************************************
 168          void PID_setActualParameter(u8 PID_N, float value)
 169          {
 170   1        g_pid_n_info[PID_N].actualParameter = value;
 171   1      
 172   1      }
 173          
 174          //************************************
 175          // Method:    setKi
C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 4   

 176          // FullName:  setKi
 177          // Access:    public 
 178          // Returns:   void
 179          // Qualifier: ÉèÖÃPIDµÄKiÖµ
 180          // Parameter: u8 PID_N
 181          // Parameter: float value
 182          //************************************
 183          void PID_setKi(u8 PID_N, float value)
 184          {
 185   1        g_pid_n_info[PID_N].Ki = value;
 186   1      }
 187          
 188          //************************************
 189          // Method:    setKp
 190          // FullName:  setKp
 191          // Access:    public 
 192          // Returns:   void
 193          // Qualifier: ÉèÖÃPIDµÄKpÖµ
 194          // Parameter: u8 PID_N
 195          // Parameter: float value
 196          //************************************
 197          void PID_setKp(u8 PID_N, float value)
 198          {
 199   1        g_pid_n_info[PID_N].Kp = value;
 200   1      }
 201          
 202          //************************************
 203          // Method:    setKd
 204          // FullName:  setKd
 205          // Access:    public 
 206          // Returns:   void
 207          // Qualifier: ÉèÖÃPIDµÄKdÖµ
 208          // Parameter: u8 PID_N
 209          // Parameter: float value
 210          //************************************
 211          void PID_setKd(u8 PID_N, float value)
 212          {
 213   1        g_pid_n_info[PID_N].Kd = value;
 214   1      }
 215          
 216          //************************************
 217          // Method:    setParameter
 218          // FullName:  setParameter
 219          // Access:    public 
 220          // Returns:   void
 221          // Qualifier: ÉèÖÃPIDµÄÄ¿±êÊýÖµ
 222          // Parameter: u8 PID_N
 223          // Parameter: float value
 224          //************************************
 225          void PID_setTargetParameter(u8 PID_N, float value)
 226          {
 227   1        g_pid_n_info[PID_N].PID_setTargetParameter = value;
 228   1      }
 229          
 230          
 231          //************************************
 232          // Method:    getParameter
 233          // FullName:  getParameter
 234          // Access:    public 
 235          // Returns:   float
 236          // Qualifier: ¶ÁÈ¡PIDµÄÄ¿±êÊýÖµ
 237          // Parameter: u8 PID_N
C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 5   

 238          //************************************
 239          float PID_getParameter(u8 PID_N)
 240          {
 241   1        return  g_pid_n_info[PID_N].PID_setTargetParameter;
 242   1      }
 243          
 244          //************************************
 245          // Method:    getErr
 246          // FullName:  getErr
 247          // Access:    public 
 248          // Returns:   float
 249          // Qualifier: ¶ÁÈ¡PIDµÄÕâÒ»´ÎÎó²îÖµ
 250          // Parameter: u8 PID_N
 251          //************************************
 252          float PID_getErr(u8 PID_N)
 253          {
 254   1        return  g_pid_n_info[PID_N].err;
 255   1      }
 256          
 257          //************************************
 258          // Method:    getErrLast
 259          // FullName:  getErrLast
 260          // Access:    public 
 261          // Returns:   float
 262          // Qualifier: ¶ÁÈ¡PIDµÄÉÏÒ»´ÎÎó²îÖµ
 263          // Parameter: u8 PID_N
 264          //************************************
 265          float PID_getErrLast(u8 PID_N)
 266          {
 267   1        return  g_pid_n_info[PID_N].err_last;
 268   1      }
 269          //************************************
 270          // Method:    getKp
 271          // FullName:  getKp
 272          // Access:    public 
 273          // Returns:   float
 274          // Qualifier: ¶ÁÈ¡PIDµÄKpÖµ
 275          // Parameter: u8 PID_N
 276          //************************************
 277          float PID_getKp(u8 PID_N)
 278          {
 279   1        return  g_pid_n_info[PID_N].Kp;
 280   1      }
 281          
 282          //************************************
 283          // Method:    getKi
 284          // FullName:  getKi
 285          // Access:    public 
 286          // Returns:   float
 287          // Qualifier: ¶ÁÈ¡PIDµÄKiÖµ
 288          // Parameter: u8 PID_N
 289          //************************************
 290          float PID_getKi(u8 PID_N)
 291          {
 292   1        return  g_pid_n_info[PID_N].Ki;
 293   1      }
 294          
 295          //************************************
 296          // Method:    getKd
 297          // FullName:  getKd
 298          // Access:    public 
 299          // Returns:   float
C51 COMPILER V8.05a   PID                                                                  07/18/2017 17:37:29 PAGE 6   

 300          // Qualifier: ¶ÁÈ¡pidµÄKd²ÎÊýÖµ
 301          // Parameter: u8 PID_N
 302          //************************************
 303          float PID_getKd(u8 PID_N)
 304          {
 305   1        return  g_pid_n_info[PID_N].Kd;
 306   1      }
 307          
 308          //************************************
 309          // Method:    getOutput
 310          // FullName:  getOutput
 311          // Access:    public 
 312          // Returns:   float
 313          // Qualifier: ¶ÁÈ¡pidÊä³öÖµ
 314          // Parameter: u8 PID_N
 315          //************************************
 316          float PID_getOutput(u8 PID_N)
 317          {
 318   1        return  g_pid_n_info[PID_N].output;
 319   1      }
 320          
 321          //************************************
 322          // Method:    getIntegral
 323          // FullName:  getIntegral
 324          // Access:    public 
 325          // Returns:   float
 326          // Qualifier: ¶ÁÈ¡pid»ý·ÖÖµ
 327          // Parameter: u8 PID_N
 328          //************************************
 329          float PID_getIntegral(u8 PID_N)
 330          {
 331   1        return  g_pid_n_info[PID_N].integral;
 332   1      }
 333          bit PID_getState(u8 PID_N)
 334          {
 335   1        return g_pid_n_info[PID_N].state;
 336   1      }
 337          #endif
 338          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1546    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    114      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
